---
# Set up basic OS services and environment

# Update the /etc/hosts file
  - name: Set /etc/hosts file
    template:
      src: templates/hosts.{% if 'probes' in group_names %}probes{% else %}endpoints{% endif %}
      dest: /etc/hosts
    become: true
  
# Set hostname
# This is a custom variable, set in the main playbook
  - name: Set hostname
    hostname:
      name: "{{ hostname }}"
    become: true

# Ensure correct time (adjust if >30s out)
  - name: Get probe time
    command: date +"%Y-%m-%dT%H:%M:%S"
    register: probetime
    changed_when: false
  - name: Set time
    command: date -s "{{ now() }}"
    when: ( now() - (probetime.stdout | to_datetime('%Y-%m-%dT%H:%M:%S'))).total_seconds()|abs > 30
    become: true
    notify: Restart Amplet

# Telegraf stats collection
  - name: Telegraf config <endpoints>
    template:
      src: templates/telegraf.conf
      dest: /etc/telegraf/telegraf.d/amp.conf
    when: "'endpoints' in group_names"
    become: true
    notify: Restart Telegraf

# TCP tuning parameters
  - name: TCP tuning
    copy:
      src: files/50-tuning.conf
      dest: /etc/sysctl.d/50-tuning.conf
    when: "ansible_architecture == 'x86_64'"
    become: true

# Tell APT to do auto updates, upgrades and removal
  - name: APT auto-upgrade
    copy:
      src: files/{{ ansible_architecture }}-{{ ansible_distribution }}{{ ansible_distribution_version }}/{{ item }}
      dest: /etc/apt/apt.conf.d/{{ item }}
    loop:
     - 10periodic
     - 50unattended-upgrades
    become: true

# SSH config
  - name: SSH keepalive
    lineinfile:
      dest: /etc/ssh/sshd_config
      line: "ClientAliveInterval 90"
    become: true

# Set MOTD
  - name: Set MOTD
    copy:
      dest: '/etc/update-motd.d/05-probe-info'
      mode: 0755
      content: |
        #!/bin/sh
        echo
        echo "Probe {{inventory_hostname}}  ==  {{access}}  ==  {{location}}  ==  {{hardware}}  ==  {{endpoint}}{{staticIP}}"
    become: true

# Bash environment - nested loop of files and users
  - name: Bash environment
    copy:
      src: files/{{ item.1 }}
      dest: /home/{{ item.0.usr }}/{{ item.1 }}
    loop: "{{ (users_admin + users_normal|default([])) | product(['.bashrc', '.profile', '.iftoprc']) | list }}"
    loop_control:
      label: "user {{ item.0.usr }}, file {{ item.1 }}"
    become: true
    become_user: "{{ item.0.usr }}"

# Add some commands to Bash history
  - name: Bash history
    lineinfile:
      dest: /home/{{ item.0.usr }}/.bash_history
      line: "{{ item.1 }}"
      create: yes
    loop: "{{ (users_admin + users_normal|default([])) | product(cmdHistory) | list }}"
    loop_control:
      label: "user {{ item.0.usr }}, command {{ item.1 }}"
    become: true
    become_user: "{{ item.0.usr }}"
